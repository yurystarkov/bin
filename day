#!/bin/sh
#
# the [day] today: write a diary
# depends on age(1)
#
# by yury; in the public domain

usage() {
  printf 'usage: %s [yy/mm/dd]\n' "${0##*/}"
  exit 0
}

log() {
  printf '\033[0;3%sm%s\033[0m %s' \
    "${3:-0}" "${2:->}" "$1" >&2
}

die() {
  log "$1" 'ERROR' '1'
  printf '\n'
  exit 1
}

enc_sec() {
  age --encrypt --output "$sec_path" --recipient "$DAY_REC"
}

dec_sec() {
  [ -f "$sec_path" ] ||
    die "$ser_name/$sec_name is not present."

  # check if clear key exists
  if [ ! -s "${key:=${DAY_KEY%%.age}}" ]; then
    age --decrypt "$DAY_KEY" > "$key" || exit 1

    {
      sleep "${DAY_TIMEOUT:-120}" || kill 0
      rm -f "$key"
    } &
  fi

  age --decrypt --identity "$key" --output - "$sec_path"
}

edit_sec() {
  : "${sec_clear:=$(mktemp)}"
  mkdir -p "$ser_path"
  if [ -f "$sec_path" ]; then
    dec_sec > "$sec_clear" ||
      die "unable to decrypt $ser_name/$sec_name."
  fi
  "${VISUAL:-$EDITOR}" "$sec_clear"
  # shellcheck disable=2002
  cat "$sec_clear" | enc_sec
  rm -f "$sec_clear"
}

init() {
  # initialize service and secret variables
  : "${ser_name:=${1##*://}}"
  : "${sec_name:=${2:-pass}}"
  : "${ser_path:=${DAY_DIR}/${ser_name}}"
  : "${sec_path:=${ser_path}/${sec_name}.age}"
}

main() {
  mkdir -p "${DAY_DIR:=$HOME/.safe}" ||
    die "could not create ${0##*/} directory."

  cd "$DAY_DIR" ||
    die 'could not access directory.'

  [ -f "${DAY_KEY:=$DAY_DIR/.key.age}" ] ||
    age-keygen | age -p > "$DAY_KEY"

  # check if the recipient is set
  [ "$DAY_REC" ] ||
     die 'no recipient is set.'

  # restrict permissions of any new files to only the current user
  umask 077

  # leave terminal usable after exit or Ctrl+C
  [ -t 1 ] &&
    trap 'stty echo icanon' INT EXIT

  if [ "$1" ]; then
    IFS=/
    # shellcheck disable=2086
    set -- $1
  else
    # shellcheck disable=2046
    set -- $(date +'%y %m %d')
  fi

  year=$1 month=$2 day=$3
  init "$year/$month" "$day"
  edit_sec
}

set +x # disable debug mode
set -f # disable globbing
set -e # disable globbing

main "$@"
